* Generics

** Types
   - example {/ ./action/generic_stack/main.go}
   @code go
   type Stack[T any] struct{
     vals []T;
   }
   j := Stack[int]{
     vals: []int{},
   }
   @end
   - cannot use `any` with ==
   - with {:$/studies/go/DataTypes:* any type}[any type] you can only store and retreive value
   - go types can be compared with ==
   - hencec there is a built-in {:$/studies/go/Types Methods and Interfaces:* Types Methods and Interfaces}[interface] in the universe
     block `comparable`
   - To make a type that holds any two value of same type
   @code go
   type Pair[T any] struct{
     val1 T
     val2 T
   }
   @end

** Functions
   - To abstract away functions
   - Generic is specified after the name in `[]`
     eg: `func Map[t1 , t2 any](s T1[]...`
   - To use `k:=[]int{};s := Map(k,...`
   - example of `Map, Filter, Reduce`
     {/ ./action/generic_functions_map_filter_reduce/main.go}
   @code go
   func Filter[t any](s []t, f func(a t) bool) []t {
     r := []t{}
     for _, v := range s {
       if f(v) {
         r = append(r, v)
       }
     }
     return r
   }
   @end

** Interfaces
   - interface with type parameters
   @code go
   type Differ[T any] interface {
     fmt.Stringer
     Diff(T) float64
   }
   @end

** Ultimate example
   {/ ./action/generic_pairs/main.go}

** Type Elements
   - Type element is composed of one or more /type terms/
     within an interface
   - /type terms/ can also be
     `slices maps arrays channels structs even functions`
   @code go
   type Integer interface{
     int | int8 | int16 | int32 | int64 | uint...
   }
   @end
   - üçâ Be aware the interfaces with type elements are
     valid only as type constraints
   - By default /type terms/ match exactly
   - We can specify /type terms/ to match with underlying type
     as well with `~int`
   @code go
   type Integer interface{
     ~int | ~int8...
   }
   @end
   - above will match with `type MyInt int`, `MyInt` as well
   - ther are interfaces in `cmp` package like `Ordered`
     interface, which support the `==, !=, <, >, <=, and >=`
     operators
   - It is legal to have both `type term` and method elements
     in an interface used for type parameters
   @code go
   type PrintableInt interface{
     ~int,
     String() string
   }
   @end

   ===
___
Origin: {:$/book/Learning Go:}[Learning Go]
