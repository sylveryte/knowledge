* Go Tooling

** Go run
   - `go run` to build binary in temp, run and the delete

** Go install
   - Adding third party tools with `go install`
   - Always be sure to include `@version` or `@latest` ü™∫
   - By default places bins in `~/go/bin` GOBIN
   - Add GOBIN in your path

*** Go imports
    - Improve import formatting with goimports
      `go install golang.org/x/tools/cmd/goimports@latest`
    -- Cleans up imports
    -- Alphabetical order
    -- Remove unuseds
    -- Guesses unspecified imports, üöß sometimes wrong

*** hey tests
    - `hey` `go install github.com/rakyll/hey@latest`
    -- `hey https://go.dev` provides stats

*** staticcheck
    - code quality check in addition to `go vet`

*** revive
    - another good linting option based on golint
    - by default only enables rules  present in golint

*** golanggci-lint ‚≠ê
    - Makes it efficient to configure and run over 50
      code-quality tools including {*** revive}, {*** staticcheck}
    - Recommended to install the binary version
    - By default runs 7 diff tolls

*** govulncheck
    - tool to check vulnerabilities in deps


** Embedding content in program
   - To include files and directory in binary
   - You must do two things to enable
   ~~ `embed` pkg must be imported, used as a flag
   ~~ Place a /magic comment/ directly before each pkg-level variable
   @code go
   import (
     _ "embed"
   )

   //go:embed passwords.txt
   var passwords string;
   @end
   --- notice the `-` {:$/studies/go/Modules Packages and Imports:}[Importing Exporting]
   --- notice the `passwords.txt`
   - For one or more dirs of files use var type `embed.FS`
   -- Type has 3 {:$/studies/go/Generics:}[Interfaces]
   ~~~ FS
   ~~~ ReadDirFS
   ~~~ ReadFileFS
   @code go
   import...

   //go:embed help
   var helpInfo embed.FS
   ...
   data,err = helpInfo.ReadFile("help/some.txt")
   fs.WalkDir(helpInfo,"help, func(....){......}")
   @end
   -- notice 'help' is the dir that has subdirs and files in it
   - You can embed binary files too.
   - Multiple dirs in single `embed.FS` by their names
     separated by space
   - You can use wildcards and ranges to specify the names
   - All embeds even unmatch check for validity by go,
     compiler fails if validity fails
   - Can include hidden files put `all:` before the name of dir

** Go generate
   - Go generate can run anything but mostly used to
     generate code
   - another common tool to use with go generate is stringer

** Build info go binary
   - Every go bin created with `go build` contains build
     information on what version, modules make up the bin
     `go version -m bin`

** Build for Other Platforms
   - `go build` cmd makes it easy to /cross-compile/ for diff
   -- os `GOOS=linux` env
   -- cpu `GOARCH=amd64` env
   - default to building machine's spec

** Build Tags
   - AKA /build constraint/
   - Can create targeted code in two ways
   ~~ use the name of the file if should be included in the build
      `something_windows.go` or `something_windows_arm64.go`
   ~~ use magic comments
   @code go
   //go:build place it before pkg declaration in your file
   package....
   eg:
   //go:build (!darwin && !linux) || (darwin && !go1.12)
   package...

   //go:build gopher //will make sure..
   //..you include -tags gopher flag for go run,bld.
   @end
   - üçä Careful *not* to put space between `//` and `go...`,
     else go considers it a build tag

** Tesing versions of go
   - Install a secondary go env
     `$ go install ...go1.19.2@latest`
     `$ go1.19.2 download`
   - To uninstall del env from /sdk/ dir and bin from GOBIN

** Help
   - Can learn more about everything about tools with
     `$ go help importpath`

   ===
___
Origin: {:$/book/Learning Go:}[Learning Go]
